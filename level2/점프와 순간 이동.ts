// https://school.programmers.co.kr/learn/courses/30/lessons/12980

/*
OO 연구소는 한 번에 K 칸을 앞으로 점프하거나, (현재까지 온 거리) x 2 에 해당하는 위치로 순간이동을 할 수 있는 특수한 기능을 가진 아이언 슈트를 개발하여 판매하고 있습니다.
이 아이언 슈트는 건전지로 작동되는데, 순간이동을 하면 건전지 사용량이 줄지 않지만, 앞으로 K 칸을 점프하면 K 만큼의 건전지 사용량이 듭니다.
그러므로 아이언 슈트를 착용하고 이동할 때는 순간 이동을 하는 것이 더 효율적입니다.
아이언 슈트 구매자는 아이언 슈트를 착용하고 거리가 N 만큼 떨어져 있는 장소로 가려고 합니다.
단, 건전지 사용량을 줄이기 위해 점프로 이동하는 것은 최소로 하려고 합니다.
아이언 슈트 구매자가 이동하려는 거리 N이 주어졌을 때, 사용해야 하는 건전지 사용량의 최솟값을 return하는 solution 함수를 만들어 주세요.
*/
/*
처음 위치 0 에서 5 칸을 앞으로 점프하면 바로 도착하지만, 건전지 사용량이 5 만큼 듭니다.

처음 위치 0 에서 2 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 2) x 2에 해당하는 위치로 이동할 수 있으므로 위치 4로 이동합니다.
이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 3 만큼 듭니다.

처음 위치 0 에서 1 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 1) x 2에 해당하는 위치로 이동할 수 있으므로 위치 2로 이동됩니다.
이때 다시 순간이동 하면 (현재까지 온 거리 : 2) x 2 만큼 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 2 만큼 듭니다.

입출력 예

  N	    result
  5	    2
  6	    2
  5000	5

  N: 1 이상 10억 이하의 자연수
*/
/*
모든 이동 거리는 ( 2의 m승 ) + ( 0 또는 1 ) 로 표기가 가능하다.
2의 제곱수는 그 크기가 어떻게 되어도 1의 전력만 소비한다.

즉, 주어진 수 n을 시그마( i = 0, m - 1 까지 )[ 2^(m-i) ] + x 로 표현할 때의 (단 x 는 0 또는 1. n이 짝수라면 0, 홀수라면 1이다.)
m + x 에 대해 구하는 솔루션
*/
/*
ex)
n = 31

31 = 2^(m) + 2^(m - 1) + 2^(m - 2) + ... + 2^(m - (m - 1))[=== 2^1] + 1
31 = 2^4 + 2^3 + 2^2 + 2^1 + 1
따라서 
m = 4
x = 1
result = 5
*/

// function solution( n: number ) {
//   let isEven = n % 2 === 0
//   let count = isEven ? 0 : 1
//   let target = n - count
//   while ( target !== 0 ) {
//     count += 1
//     let i = 1
//     while ( 2 ** i <= target ) {
//       i += 1
//     }
//     i -= 1
//     target = target - 2 ** i
//   }
//   return count
// }

// function solution( n: number ) {
//   let count = 0
//   let target = n
//   while ( target > 0 ) {
//     // 2로 나누어 떨어지지 않는 수가 나올때 마다 +1
//     if ( target % 2 ) {
//       count += 1
//       target -= 1
//     }

//     target /= 2
//   }
//   return count
// }

function solution( n: number ) {
  // 2로 나누어 떨어지지 않는 수가 나올때 마다 +1
  return [...n.toString( 2 )].filter( ( str ) => str === '1' ).length
}

export {}
